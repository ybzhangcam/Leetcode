//Approach 1  
class Solution {
public:
	ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
		ListNode dummy(0), *p = &dummy;  //notes: dummy(0)
		int carry = 0, i, j, sum;
		while (l1 || l2 || carry)
		{
			i = l1 ? l1->val : 0;  if (l1) l1 = l1->next;
			j = l2 ? l2->val : 0;  if (l2) l2 = l2->next;
			sum = (i + j + carry) % 10;
			carry = (i + j + carry) / 10;  
			p->next = new ListNode(sum);  //notes: new
			p = p->next;
		}
		return dummy.next;
	}
};

//Approach 2  
struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
	struct ListNode *p1 = l1, *p2 = l2, *pre; int sum, x, y, carry = 0, d;

	while (p1 || p2)
	{
		x = p1 ? p1->val : 0;
		y = p2 ? p2->val : 0;
		sum = (x + y + carry) % 10;
		carry = (x + y + carry) / 10;
		if (p1) { p1->val = sum; pre = p1; p1 = p1->next; d = 1; }
		if (p2) { p2->val = sum; pre = p2; p2 = p2->next; d = 2; }
	}
	if (!carry) return d == 1 ? l1 : l2;
	pre->next = (struct ListNode*)malloc(sizeof(struct ListNode));
	pre->next->val = 1; pre->next->next = NULL;
	return d == 1 ? l1 : l2;
}
