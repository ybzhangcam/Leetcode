//Approach 1  20 ms  50%  O(2N)  unordered_set
class Solution {
public:
	int lengthOfLongestSubstring(string s) {
		unordered_set<char> set;
		int len = 0, i = 0, j = 0;
		while (j < s.size())
		{
			if (!set.count(s[j])) { set.insert(s[j++]); len = max(len, j - i); }
			else set.erase(s[i++]);
		}
		return len;
	}
}; 

//Approach 2  4ms  100% O(N) unordered_map 
class Solution {
public:
	int lengthOfLongestSubstring(string s) {
		unordered_map<char, int> map; 
		int i = 0, j = 0, len = 0;
		for (j = 0; j < s.size(); j++)
		{
			if (map[s[j]] > i) i = map[s[j]];
			map[s[j]] = j + 1; 
			len = max(len, j - i + 1);
		}
		return len;
	}
};
 
//Approach 2b
class Solution {
public:
	int lengthOfLongestSubstring(string s) {
		vector<int> map(128, -1);  //8ms 
		int i = 0, j = 0, len = 0;
		for (j = 0; j < s.size(); j++)
		{
			if (map[s[j]] >= i) i = map[s[j]] + 1;
			map[s[j]] = j; 
			len = max(len, j - i + 1);
		}
		return len;
	}
};
